install.packages("slidify")
install.packages(slidify)
install.packages("KernSmooth")
load KernSmooth
load(KernSmooth)
library(KernSmooth)
library(swirl)
swirl()
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10, by=0.5)
seq(5,10,length=30)
seq(5, 10, length=30)
my_seq < -seq(5, 10, length=30)
my_seq <-seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with= my_seq)
my_seq
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
num_vect= c(0.5, 55, -10, 6)
num_vect
num_vect= c[0.5, 55, -10, 6]
?c
num_vect= c[0.5, 55, -10, 6]
num_vect= c[0.5, 55, -10, 6]
num_vect= c(0.5, 55, -10, 6)
info()
skip()
tf <- num_vect <1
tf
num_vect >=6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse=" ")
my_name <- c(my_char, "Nasia")
my_name
paste(my_name, collapse=" ")
paste("Hello", "world!", sep = " ")
paste(1:3, c('X', 'Y', 'Z'), sep="")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample (c(y,z), 100)
my_data
c(y,z)
my_na <- is.na(my_data)
my_na
my_data==NA
sum(my_na)
my_data
0/0
Inf/In
Inf/Inf
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar",
| "norf")
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix()
?matrix
matrix(1:20,4,5)
matrix(data=1:20,nrow=4,ncol=5)
my_matrix2matrix(1:20,4,5)
my_matrix2 <- matrix(1:20,4,5)
identical(my_matrix, my_matrix2)
patients=c("Bill", "Gina", "Kelly", "Sean")
patients
patients=c("Bill", "Gina", "Kelly", "Sean")
info()
patients <- c("Bill", "Gina", "Kelly", "Sean")
my_matrix
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_marix)
my_data <- data.frame(patients, my_matrix)
my_data
class)()
class()
class(my_data)
cnames=c("patient", "age", "weight", "bp", "rating", "test")
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
?colnames
colnames(my_data) <- cnames
my_data
gl(3,0)
x <- c(norm(10), runif(10), rnorm(10,1))
x <- c(rnorm(10), runif(10), rnorm(10,1))
x
f <-gl(3,0)
f
split(x,f)
split(x, f)
f <-gl(3,10)
f
library(datasets)
data(iris)
library(datasets)
data(iris)
?iris
iris
library(swirl)
swirl()
library(swirl)
swirl()
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
sapply(flags,class)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean())
sapply(flag_colors, mean
)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
lapply(flags, unique)
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
unique_vals <- sapply(flags, unique)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmasses, summary)
tapply(flags$landmasses, flags$population, summary)
tapply(flags$population, flags$population, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
quit()
library(datasets)
data(iris)
?iris
str(iris)
sapply(iris, mean)
apply(iris[, 1:4], 2, mean)
colMeans(iris)
apply(iris, 1, mean)
apply(iris[, 1:4], 1, mean)
library(datasets)
data(mtcars)
str(mtcars)
temp4 <- tapply(mtcars$hp,mtcars$cyl,mean )
temp4
class(temp4)
temp4$4-temp4$8
temp4$4-temp4[2,3]
temp4[2,1]-temp4[2,3]
temp4[1,1]
temp4[1]
temp4[1]-temp[3]
temp4[1]-temp4[3]
abs(temp4[1]-temp4[3])
debug(ls)
ls
n
debug(ls)
ls
debug(ls)
ls()
3
5
q()
quit
quit()
exit()
browse()
?browse
library(datasets)
data(iris)
lapply(iris, mean)
undebug(ls
)
library(datasets)
data(iris)
lapply(iris,mean)
nrow(iris)
iris
lapply(iris[101:150],mean)
lapply(iris[101:150,],mean)
getwd
chwd(C/:Users)
chwd("C/:Users")
chngwd("C/:Users")
chgwd("C/:Users")
?chngwd
setwd("C/:Users")
setwd("C:/Users")
setwd("C:/Users/IBM_ADMIN/ass1/ProgramingAssignment2")
setwd("C:/Users/IBM_ADMIN/ass1/ProgrammingAssignment2")
A = matrix(
+   c(2, 4, 3, 1, 5, 7),
+   nrow=3,
+   ncol=2)
A = matrix( c(2, 4, 3, 1, 5, 7), nrow=3, ncol=2)
A
A = matrix( c(1, 2, 3, 4, 5, 6, 7, 8, 9), nrow=3, ncol=3)
A
solve(A)
A = matrix( c(2, 4, 3, 1, 5, 7), nrow=3, ncol=2)
solve(A)
A = matrix( c(1, 2, 3, 1, 2, 3, 1, 2, 3), nrow=3, ncol=3)
solve(A)
A = matrix( c(1, 2, 3, 4, 2, 3, 1, 2, 3), nrow=3, ncol=3)
solve(A)
A = matrix( c(1, 2, 3, 4, 2, 3, 2, 2, 3), nrow=3, ncol=3)
solve(A)
A = matrix( c(1, 1, 1, 4, 2, 2, 2, 3, 3), nrow=3, ncol=3)
solve(A)
A = matrix( c(2, 2, 3, 2), nrow=2, ncol=2)
solve(A)
makeCacheMatrix(A)
source(makeCacheMatrix)
source(cacheMatrix)
source(cachematrix)
source(cachematrix.R)
source("cachematrix.R")
source("cachematrix.R")
makeCacheMatrix(A)
source("cachematrix.R")
cacheSolve(A)
source("mean.R")
b=[1 2 3]
b=[1, 2, 3]
b=vector(1,2,3)
b=c(1,2,3)
class(b)
class(A)
b
cachemean(b)
cacheSolve(makeCacheMatrix(2*diag(3)))
makeCacheMatrix(2*diag(3))
2*diag(3)
cacheSolve(makeCacheMatrix(matrix(c(2,2,3,2), row=2, col=2 )))
cacheSolve(makeCacheMatrix(matrix(c(2,2,3,2), nrow=2, ncol=2 )))
solve(A)
cacheSolve(makeCacheMatrix(matrix(c(2,2,3,2), nrow=2, ncol=2 )))
source(cachematrix.R)
source("cachematrix.R")
cacheSolve(makeCacheMatrix(matrix(c(2,2,3,2), nrow=2, ncol=2 )))
cacheSolve(makeCacheMatrix(A))
x<-A
x
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
x
m
y
y
set <- function(y) {
x <<- y
m <<- NULL
}
set <- function(y) {
x <<- y
m <<- NULL
}
x
A<- matrix(c(2,2,3,2), nrow=2, ncol=2)
A
solve(A)
help("<<-")
cacheSolve(makeCacheMatrix(A))
source("cachematrix.R")
cacheSolve(makeCacheMatrix(A))
source("cachematrix.R")
cacheSolve(makeCacheMatrix(A))
A
A<- matrix(c(2,2,3,2), nrow=2, ncol=2)
cacheSolve(makeCacheMatrix(A))
A<- matrix(c(2,2,3,2), nrow=2, ncol=2)
cacheSolve(makeCacheMatrix(A))
cacheSolve(makeCacheMatrix(matrix(c(2,2,3,2), nrow=2, ncol=2 )))
source("cachematrix.R")
cacheSolve(makeCacheMatrix(matrix(c(2,2,3,2), nrow=2, ncol=2 )))
cacheSolve(makeCacheMatrix(A))
source("cachematrix.R")
cacheSolve(makeCacheMatrix(matrix(c(2,2,3,2), nrow=2, ncol=2 )))
cacheInverse(makeCacheMatrix(matrix(c(2,2,3,2), nrow=2, ncol=2 )))
matrix(c(2,2,3,2), nrow=2, ncol=2 )
A=matrix(c(2,2,3,2), nrow=2, ncol=2 )
source("cachematrix.R")
cacheInverse(makeCacheMatrix(matrix(c(2,2,3,2), nrow=2, ncol=2 )))
cacheInverse(makeCacheMatrix(matrix(c(1,0,0,1), nrow=2, ncol=2 )))
source("cachematrix.R")
source("cachematrix.R")
cacheInverse(makeCacheMatrix(matrix(c(1,0,0,1), nrow=2, ncol=2 )))
source("cachematrix.R")
cacheInverse(makeCacheMatrix(matrix(c(1,0,0,1), nrow=2, ncol=2 )))
source("cachematrix.R")
cacheInverse(makeCacheMatrix(matrix(c(1,0,0,1), nrow=2, ncol=2 )))
source("cachematrix.R")
B <- cacheInverse(makeCacheMatrix(matrix(c(1,0,0,1), nrow=2, ncol=2 )))
?return
cacheInverse(list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse))
lista<-makeCacheMatrix(A)
lista
cacheInverse(liasta)
cacheInverse(lista)
cacheInverse(lista)
source("cachematrix.R")
B <- cacheInverse(makeCacheMatrix(matrix(c(1,0,0,1), nrow=2, ncol=2 )))
B
B <- cacheInverse(makeCacheMatrix(matrix(c(2,2,3,2), nrow=2, ncol=2 )))
B
?return
